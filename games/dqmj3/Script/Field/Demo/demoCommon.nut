//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		位置 and 向き取得
//
//----------------------------------------------------------------------------
//	引数	: chr	キャラクターID
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function PosDebug(chr)
{
	local pos = GetPos_(chr);
	local dir = GetDir_(chr);
	DebugPrint( "▽▽▽▽▽▽▽▽ID:" + chr + "▽▽▽▽▽▽▽▽" );
	DebugPrint( "[X]=" + pos.x + ", [Y]=" + pos.y + ", [Z]=" + pos.z );
	DebugPrint( "Dir=" + dir );
	DebugPrint( "Vec3(" + pos.x + ", " + pos.y + ", " + pos.z + ")");
	DebugPrint( "blender: " + pos.x + ", " + pos.z*-1 + ", " + pos.y);
	DebugPrint( "△△△△△△△△△△△△△△△△△△" );
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		コネクティブモードON（プレイヤーモーション付き）
//
//----------------------------------------------------------------------------
//	引数	: layout	レイアウト名
//			: player	プレイヤーID
//			: reactor	設定先モーション名１（顔を少し左向ける→リアクターを触る）
//			: reactor_L	設定先モーション名２（リアクターを触るLOOP）
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function OpenConnectiveWithMotion(layout, player, reactor, reactor_L)
{
	PlaySE_("SE_DEM_019");		// コネクティブモード受信音
	Wait_(10);
	SetMotion_(player, reactor, BLEND_L);
	WaitMotion(player);
	SetMotion_(player, reactor_L, BLEND_M);
	Wait_(20);
	OpenConnective(layout);
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		モーション（会話）
//
//----------------------------------------------------------------------------
//	引数	: chr	キャラクターID
//
//	戻り値	: flame_wait	待ちフレーム数
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function MotionTalk(chr)
{
	local frame_wait;
	
	SetMotion_(chr, MOT_TALK, BLEND_M);
	frame_wait = WaitMotion(chr);
	SetMotion_(chr, MOT_TALKLOOP, BLEND_M);
	
	return frame_wait;
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		デモ開始処理
//
//----------------------------------------------------------------------------
//	引数	: color	フェードの色
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function StartDemo(color)
{
	SetFade_(FADE_IN, color, FADE_DEF);
	WaitFade_();
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		デモ開始処理（フェード待ちなし）
//
//----------------------------------------------------------------------------
//	引数	: color	フェードの色
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function StartDemoNoFade(color)
{
	SetFade_(FADE_IN, color, FADE_DEF);
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		デモ終了処理
//
//----------------------------------------------------------------------------
//	引数	: color	フェードの色
//			: spd	フェードスピード ※デフォルト値 = FADE_DEF(30F)
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function EndDemo(color, spd = FADE_DEF)
{
	EndDemoBgmFade_(spd);
	
	SetFade_(FADE_OUT, color, spd);
	WaitFade_();
	DeleteAllTask_();
	SetSepiaColor_(false);
	End_();
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		デモ終了処理（エンカウントエフェクトあり）
//
//----------------------------------------------------------------------------
//	引数	: typ	エンカウントエフェクトタイプ
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function EncountEndDemo(typ)
{
	local task;
	local wait;
	
	StopBgm_(BGM_STOP_DEF);
	
	switch (typ)
	{
	// 「通常エフェクト」
	case ENCOUNT_NORMAL :
		wait = 30;
		break;
	// 「ボス用エフェクト」
	case ENCOUNT_BOSS :
		wait = 20;
		break;
	default :
		DebugPrint("WARNING : エンカウントエフェクトタイプ (" + typ + ") が不正です[EncountEndDemo]");
	}
	
	Wait_(wait);
	task = Task_EncountEffect_(typ);
	WaitTask(task);
	DeleteAllTask_();
	EndDemoBgmFade_(FADE_DEF);	// 既にBGMを停止しているが、DemoBase.nutの設定を反映させるため呼ぶ
	End_();
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		ダミーメッセージ表示
//
//----------------------------------------------------------------------------
//	引数	: なし
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function DummyMsg()
{
	SetFadePlane_(FADE_PLANE.PLANE_3D);
	SetFade_(FADE_OUT, FADE_COLOR_BLACK, 1);
	
	//===============================================
	// ダミーメッセージ
	//-----------------------------------------------
	OpenMsgWnd_();
	ShowMsg_("DEMO_DUMMY");
	KeyInputWait_();
	CloseMsgWnd_();
	//===============================================
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		LOD読込待ち
//
//----------------------------------------------------------------------------
//	引数	: eye	カメラ視点
//			: tgt	カメラ注視点
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function ReadWaitingLod(eye, tgt)
{
	// カメラ位置を移動
	SetPointCameraEye_(eye);
	SetPointCameraTarget_(tgt);
	
	// LOD更新停止を解除
	SetStopLod_(false);

	// 現カメラ位置でLOD読み込み待ち
	WaitLod_();
	while (IsWaitLod_()) {
		Wait_(1);
	}
	
	// LOD更新停止
	SetStopLod_(true);
	
	DebugPrint("LODの読み込みが完了");
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		指定モーション待ち
//
//----------------------------------------------------------------------------
//	引数	: chr	キャラクターID
//			: mot	モーションID
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function CheckWaitMotion(chr, mot)
{
	local id = GetMotion_(chr);
	
	if(id == mot)
	{
		WaitMotion(chr);
	}
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		α値指定フェードアウト＆フェードイン
//
//----------------------------------------------------------------------------
//	引数	: chr	キャラクターID
//			: alpha	α値
//			: frm	フレーム数
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function SetAlphaFade(chr, alpha, frm)
{
	local now_alpha;
	local change_alpha;
	
	now_alpha = GetAlpha_(chr);
	change_alpha = (now_alpha - alpha) / frm;
	
	for (local i=1; i<=frm; i++) {
		SetAlpha_(chr, now_alpha - (i * change_alpha));
		Wait_(1);
	}
	
	SetAlpha_(chr, alpha);
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		時間を徐々に変更
//
//----------------------------------------------------------------------------
//	引数	: time	最終的な時間
//			: frame	何フレームで時間経過させるか
//			: start	現在の時間
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function ChangeTime(time, frame, start = 0)
{
	local change_time;		// １フレームで変更する時間
	
	change_time = (time - start) / frame;		// (最終時間 − 開始時間) ÷ フレーム数
	
	for (local i=1; i<=frame; i++) {
		SetTime_(start + (change_time * i));
		Wait_(1);
	}
	
	SetTime_(time);
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		過去映像用色調補正
//
//----------------------------------------------------------------------------
//	引数	: なし
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function ChangeColorSepia()
{
	SetSepiaColor_(true);
	ChangeColorTone_(0.2, 0.2, 0.2, 0);
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		デフォルトの足音SEを無音化＆指定間隔で足音を鳴らす
//
//----------------------------------------------------------------------------
//	引数	: chr	キャラクターID
//			: se_id	SE名
//			: frm	鳴らす間隔フレーム数
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function Task_ChangeStepSe(chr, se_id, frm)
{
	local task;
	
	SetStepSe_(chr, SILENT_STEP_SE);
	task = Task_PlaySe_(se_id, frm);
	
	return task;
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		足音SEをデフォルトに戻す
//
//----------------------------------------------------------------------------
//	引数	: chr	キャラクターID
//			: task	タスクインデックス
//
//	戻り値	: なし
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function DeleteTaskStepSe(chr, task)
{
	ResetStepSe_(chr);
	DeleteTask_(task);
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		SEの音量調整
//
//----------------------------------------------------------------------------
//	引数	: se			SE			SE名
//			: frm			Frame		音量変更する尺
//			: vol			Volume		音量を設定する場合は1〜0の数値
//			: fade			IN or OUT	フェードイン、フェードアウト用
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function ChangeSeVol_(se, frm, vol)
{
	local taskk;
	taskk = PlaySE_(se);
	if(vol = 7){
		SetSEVolume_(taskk, 0, frm);
	}else{
		if(vol = 8){
			SetSEVolume_(taskk, 1, frm);
		}else{
			SetSEVolume_(taskk, vol, frm);
		}
	}
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		画面暗転に合わせたSEの音量調整
//
//----------------------------------------------------------------------------
//	引数	: se			SE				SE名
//			: frm			Frame			SEを再生する間隔
//			: fade			FadeOutFrame	フェードアウトにかかるフレーム数
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function FadeOutContinuitySE_(se, frm, fade)
{
	local task, vol, point;
	local count = 0.00;
	count = fade;
	point = frm;

	while(1){
		if(point == frm){
			vol = count / fade;
			task = PlaySE_(se);
			SetSEVolume_(task, vol, 0);
			point = 0;
		}
		Wait_(1);
		count = count - 1;
		point = point + 1;
		if(count==0){
			break;
		}
	}
}

